library(leaflet)#
library(geojsonio)#
library(lubridate)#
library(rmapshaper)#
library(ggplot2)#
library(ggthemes)#
library(RColorBrewer)#
library(tidyverse)#
library(plotly)#
library(ggpubr)#
library(gridExtra)#
library(cowplot)#
library(shiny)#
library(shinydashboard)#
#
# animation#
Shooting_data <- read.csv("NYPD_Shooting_modified1.csv")#
Shooting_data$Numeric_time = as.numeric(hms(Shooting_data$OCCUR_TIME))/60#
neighborhood_map <- geojsonio::geojson_read("Neighborhood Tabulation Areas.geojson",what = "sp")#
neighborhood_map <- rmapshaper::ms_simplify(neighborhood_map)#
neighborhood_vector = neighborhood_map$ntaname#
Animation_matrix = matrix(rep(0,length(neighborhood_vector)*48),ncol = length(neighborhood_vector))#
colnames(Animation_matrix) = neighborhood_vector#
for(i in 1:dim(Shooting_data)[1]){#
    time = Shooting_data[i,"Numeric_time"]#
    nta = Shooting_data[i,"ntaname"]#
    Animation_matrix[(time%/%30+1),nta] = Animation_matrix[(time%/%30+1),nta]+1#
}#
Animation_array = rowSums(Animation_matrix)#
df.line_chart = data.frame(Time = (0:47)/2,Amount = Animation_array)#
#
bins <- c(0, 5, 10, 20, 50, 100)#
pal <- colorBin("YlOrRd", bins = bins)#
#
# change date format#
Shooting_data$OCCUR_DATE<- format(as.Date(Shooting_data$OCCUR_DATE, format = "%m/%d/%Y"), "%Y-%m-%d")#
Shooting_data$OCCUR_DATE <- as.Date(Shooting_data$OCCUR_DATE)#
Shooting_data$OCCUR_YEAR <- year(Shooting_data$OCCUR_DATE)#
#Shooting_data$OCCUR_TIME <- hms::as_hms(strptime(Shooting_data$OCCUR_TIME, "%H:%M:%S"))#
#Shooting_data$OCCUR_TIME <- strptime(Shooting_data$OCCUR_TIME, "%H:%M:%S")#
#
# map with markers#
st <- geojsonio::geojson_read("Neighborhood Tabulation Areas.geojson", what = "sp")#
#
content <- paste("Date:",Shooting_data$OCCUR_DATE,"; ", #
                 "Time:",Shooting_data$OCCUR_TIME, "<br/>",#
                 "Statistical murder flag:",Shooting_data$STATISTICAL_MURDER_FLAG, "<br/>",#
                 "Precinct:",Shooting_data$PRECINCT,"; ",#
                 "Vic age:",Shooting_data$VIC_AGE_GROUP,"<br/>",#
                 "Vic gender:",Shooting_data$VIC_SEX,"; ",#
                 "Vic race:",Shooting_data$VIC_RACE,"<br/>")#
# plotimage#
plotimage <- function(x){#
    clean_age_shoot = x[x$PERP_AGE_GROUP %in% c("<18","18-24","25-44","45-64","65+","UNKNOWN"),]#
    df_age_shoot = as.data.frame(prop.table(table(droplevels(clean_age_shoot$PERP_AGE_GROUP))))#
    df_age_shoot = cbind(df_age_shoot,a = rep("shooter",nrow(df_age_shoot)))#
    clean_age_vic = Shooting_data[Shooting_data$VIC_AGE_GROUP %in% c("<18","18-24","25-44","45-64","65+","UNKNOWN"),]#
    df_age_vic = as.data.frame(prop.table(table(droplevels(clean_age_vic$VIC_AGE_GROUP))))#
    df_age_vic = cbind(df_age_vic,a = rep("victim",nrow(df_age_vic)))#
    df_age = rbind(df_age_shoot,df_age_vic)#
    colnames(df_age) = c("AGE_GROUP","Proportion","Identity")#
    g1 = ggplot(df_age, aes(x="", y=Proportion, fill=AGE_GROUP)) +#
        geom_bar(stat="identity", width=1, color="white") +#
        scale_fill_brewer(palette = "Pastel1")+#
        coord_polar("y", start=0) +#
        theme_void()+#
        facet_wrap(~Identity)#
    clean_sex_shoot = x[x$PERP_SEX %in% c("M","F","U"),]#
    df_sex_shoot = as.data.frame(prop.table(table(droplevels(clean_sex_shoot$PERP_SEX))))#
    df_sex_shoot = cbind(df_sex_shoot,a = rep("shooter",nrow(df_sex_shoot)))#
    clean_sex_vic = Shooting_data[Shooting_data$VIC_SEX %in% c("M","F","U"),]#
    df_sex_vic = as.data.frame(prop.table(table(droplevels(clean_sex_vic$VIC_SEX))))#
    df_sex_vic = cbind(df_sex_vic,a = rep("victim",nrow(df_sex_vic)))#
    df_sex = rbind(df_sex_shoot,df_sex_vic)#
    colnames(df_sex) = c("SEX","Proportion","Identity")#
    g2 = ggplot(df_sex, aes(x="", y=Proportion, fill=SEX)) +#
        geom_bar(stat="identity", width=1, color="white") +#
        scale_fill_brewer(palette = "Pastel1")+#
        coord_polar("y", start=0) +#
        theme_void()+#
        facet_wrap(~Identity)#
    clean_race_shoot = x[x$PERP_RACE !="",]#
    df_race_shoot = as.data.frame(prop.table(table(droplevels(clean_race_shoot$PERP_RACE))))#
    df_race_shoot = cbind(df_race_shoot,a = rep("shooter",nrow(df_race_shoot)))#
    clean_race_vic = Shooting_data[Shooting_data$VIC_RACE != "",]#
    df_race_vic = as.data.frame(prop.table(table(droplevels(clean_race_vic$VIC_RACE))))#
    df_race_vic = cbind(df_race_vic,a = rep("victim",nrow(df_race_vic)))#
    df_race = rbind(df_race_shoot,df_race_vic)#
    colnames(df_race) = c("RACE","Proportion","Identity")#
    g3 = ggplot(df_race, aes(x="", y=Proportion, fill=RACE)) +#
        geom_bar(stat="identity", width=1, color="white") +#
        scale_fill_brewer(palette = "Pastel1")+#
        coord_polar("y", start=0) +#
        theme_void()+#
        facet_wrap(~Identity)#
    grid.arrange(arrangeGrob(g1, g2, ncol= 2), g3, ncol = 1)#
}#
# overview#
# plots#
overall_data<- Shooting_data %>% group_by(OCCUR_DATE) %>% summarize(count = n())#
#
## year#
Shooting_data$OCCUR_YEAR <- year(Shooting_data$OCCUR_DATE)#
year_data <- Shooting_data %>% group_by(OCCUR_YEAR) %>% summarize(count = n())#
yearTS <- ggplot(year_data, aes(OCCUR_YEAR, count)) +#
        geom_point() + geom_line(color = "grey50") +#
        ggtitle("Shooting Counts from 2006-2018 by year") #
#
## borough#
year_boro <- Shooting_data %>% #
    group_by(OCCUR_YEAR, BORO) %>% summarize(count = n())#
boroTS <- ggplot(year_boro, aes(OCCUR_YEAR, count, color = BORO))+#
    geom_point()+ geom_line(aes(group= BORO))+#
    ggtitle("Shootings counts by boro/year") #
#
## murder#
year_murder <- Shooting_data %>% group_by(OCCUR_YEAR, STATISTICAL_MURDER_FLAG) %>%#
    summarize(count = n())#
murderTS <- ggplot(year_murder, aes(OCCUR_YEAR, count, color = STATISTICAL_MURDER_FLAG))+#
    geom_point()+#
    geom_line(aes(group= STATISTICAL_MURDER_FLAG))+#
    ggtitle("Shootings counts by murder/year")#
#
## season#
Shooting_data$OCCUR_SEASON<-quarters(Shooting_data$OCCUR_DATE)#
season_year <- Shooting_data %>% #
    group_by(OCCUR_SEASON, OCCUR_YEAR) %>% summarize(count = n())#
seasonTS <- ggplot(season_year, aes(OCCUR_SEASON, count, color = as.factor(OCCUR_YEAR))) +#
    geom_line(aes(group = as.factor(OCCUR_YEAR))) + ggtitle("season/year") #
#
## week#
Shooting_data$OCCUR_MONTH<-months(Shooting_data$OCCUR_DATE)#
Shooting_data$OCCUR_WEEKDAY <-wday(Shooting_data$OCCUR_DATE, label = TRUE)#
month_weekday <- Shooting_data %>% group_by(OCCUR_MONTH, OCCUR_WEEKDAY) %>%#
    summarize(count = n()) #
weekTS <- ggplot(month_weekday, aes(OCCUR_MONTH, count))+#
    geom_line(aes(group= OCCUR_WEEKDAY))+#
    facet_grid(OCCUR_WEEKDAY~.)+#
    geom_bar(stat = "identity", fill="aliceblue", alpha= 0.9)+#
    ggtitle("month/weekday")#
# choice#
out <- function(choice) {#
    if (choice == "Year") print(yearTS)#
    if (choice == "Season") print(seasonTS)#
    if (choice == "Week") print(weekTS)#
    if (choice == "Borough") print(boroTS)#
    if (choice == "Murder") print(murderTS)#
}#
# event#
eventimage = function (x, i){#
    data <- Shooting_data %>%#
        filter(OCCUR_DATE >= as.Date(x[i, ]$start_date, format = "%Y-%m-%d")&#
                   OCCUR_DATE <= as.Date(x[i, ]$end_date, format = "%Y-%m-%d")) %>%#
        group_by(OCCUR_DATE) %>%#
        summarize(count = n())#
    g <- ggplot(data, aes(OCCUR_DATE, count)) +#
        geom_label(aes(label = wday(OCCUR_DATE, label = TRUE))) +#
        geom_line(color = "cornflowerblue") +#
        xlab("")+#
        scale_x_date(date_labels = "%b\n%d",#
                     date_breaks = "1 day")#
    start <- as.Date(x[i, ]$beginning, format = "%Y-%m-%d")#
    end <- as.Date(x[i, ]$ending, format = "%Y-%m-%d")#
    g+annotate("rect", xmin = start, xmax = end,#
               ymin = -Inf, ymax = Inf, fill = "green",#
               alpha = .2) +#
        annotate("text", x = end + 0.4,#
                 y = 10, label = x[i, ]$label,#
                 color = "green", hjust = 0) +#
        theme_classic()#
}#
#
christmas <- data.frame(#
    "start_date" = c(#
        "2006-12-20","2007-12-20","2008-12-20","2009-12-20","2010-12-20",#
        "2011-12-20","2012-12-20","2013-12-20","2014-12-20",#
        "2015-12-20","2016-12-20","2017-12-20","2018-12-20"),#
    "end_date" = c(#
        "2007-01-03","2008-01-03","2009-01-03","2010-01-03","2011-01-03",#
        "2012-01-03","2013-01-03","2014-01-03","2015-01-03",#
        "2016-01-03","2017-01-03","2018-01-03","2019-01-03"), #
    "beginning" = c(#
        "2006-12-24","2007-12-24","2008-12-24","2009-12-24","2010-12-24",#
        "2011-12-24","2012-12-24","2013-12-24","2014-12-24",#
        "2015-12-24","2016-12-24","2017-12-24", "2019-12-24"),#
    "ending" = c(#
        "2006-12-27", "2007-12-27","2008-12-27","2009-12-27","2010-12-27",#
        "2011-12-27","2012-12-27","2013-12-27","2014-12-27",#
        "2015-12-27","2016-12-27","2017-12-27","2018-12-27"),#
    "label" = rep("Dec 24 - Dec 27", 13)#
)#
#
Independence_day<-data.frame(#
    "start_date" = c(#
        "2006-06-30","2007-06-30","2008-06-30","2009-06-30","2010-06-30",#
        "2011-06-30","2012-06-30","2013-06-30","2014-06-30",#
        "2015-06-30","2016-06-30","2017-06-30","2018-06-30"),#
    "end_date" = c(#
        "2006-07-13","2007-07-13","2008-07-13","2009-07-13","2010-07-13",#
        "2011-07-13","2012-07-13","2013-07-13","2014-07-13",#
        "2015-07-13","2016-07-13","2017-07-13","2018-07-13"), #
    "beginning" = c(#
        "2006-07-03","2007-07-03","2008-07-03","2009-07-03","2010-07-03",#
        "2011-07-03","2012-07-03","2013-07-03","2014-07-03",#
        "2015-07-03","2016-07-03","2017-07-03", "2019-07-03"),#
    "ending" = c(#
        "2006-07-06", "2007-07-06","2008-07-06","2009-07-06","2010-07-06",#
        "2011-07-06","2012-07-06","2013-07-06","2014-07-06",#
        "2015-07-06","2016-07-06","2017-07-06","2018-07-06"),#
    "label" = rep("Jul 03 - Jul 06", 13)#
)#
#
Halloween<-data.frame(#
    "start_date" = c(#
        "2006-10-25","2007-10-25","2008-10-25","2009-10-25","2010-10-25",#
        "2011-10-25","2012-10-25","2013-10-25","2014-10-25",#
        "2015-10-25","2016-10-25","2017-10-25","2018-10-25"),#
    "end_date" = c(#
        "2006-11-03","2007-11-03","2008-11-03","2009-11-03","2010-11-03",#
        "2011-11-03","2012-11-03","2013-11-03","2014-11-03",#
        "2015-11-03","2016-11-03","2017-11-03","2018-11-03"), #
    "beginning" = c(#
        "2006-10-30","2007-10-30","2008-10-30","2009-10-30","2010-10-30",#
        "2011-10-30","2012-10-30","2013-10-30","2014-10-30",#
        "2015-10-30","2016-10-30","2017-10-30", "2019-10-30"),#
    "ending" = c(#
        "2006-11-02", "2007-11-02","2008-11-02","2009-11-02","2010-11-02",#
        "2011-11-02","2012-11-02","2013-11-02","2014-11-02",#
        "2015-11-02","2016-11-02","2017-11-02","2018-11-02"),#
    "label" = rep("Oct 30 - Nov 02", 13)#
)#
#
co <- function(cho) {#
    if (cho == "Independence Day") return(Independence_day)#
    if (cho == "Christmas") return(christmas)#
    if (cho == "Halloween") return(Halloween)#
}#
#ui#
ui <- dashboardPage(skin = "yellow",#
                    dashboardHeader(title = "NYC Shooting Crime Map"),#
                    dashboardSidebar(sidebarMenu(#
                        menuItem("Home", tabName = "Home", icon = icon("home")),#
                        menuItem("Animation", tabName = "Animation", icon = icon("train")),#
                        #menuItem("Map", tabName = "Map", icon = icon("map")),#
                        menuItem("Insight", tabName = "Insight", icon = icon("layer-group"),#
                                 menuSubItem("Overview", tabName = "Overview", icon = icon("industry")),#
                                 menuSubItem("Map", tabName = "Map", icon = icon("map")),#
                                 menuSubItem("Holidays", tabName = "Holidays", icon = icon("taxi"))),#
                        menuItem("Source", tabName = "Source", icon = icon("th"))#
                    )),#
                    dashboardBody(#
                        tabItems(#
                            #home#
                            tabItem(tabName = "Home",#
                                    fluidPage(#
                                        fluidRow(#
                                            box(width = 15, title = "Introduction", status = "warning",#
                                                solidHeader = TRUE, h3("NYC Shooting Crime Map"),#
                                                h4("By Weijia Bao, Kanyan Chen, Tiantian Chu, Chang Xu, Qingyu Zhang"),#
                                                tags$img(src = 'image.png'),#
                                                "In America, which has one of the highest rates of gun homicide in the world, cities experience gun violence at very high rates.  And urban gun violence touches on issues central to American life : safety, equality, opportunity and community. Residents and leaders of America’s cities face few challenges more urgent than gun violence. It takes thousands of lives, depresses the quality of life of whole neighborhoods, drives people to move away, and reduces cities’ attractiveness for newcomers. It makes it harder for schools, businesses, and community institutions to thrive. Urban gun violence also reflects and worsens America’s existing racial and economic disparities. In a recent year in New York City, for example, young black men were killed with guns at a rate 20 times the national average, and were 100 times more likely to be shot than white NYC residents of the same age. So gun violence is a very severe situation to America, especially to big cities, like New York City.#
So, our shiny app is about Shooting Crime Map in NYC, we aim at two types of customers: Residents and Police Departments. For residents, they can use our app to check the shooting crime rate in different neighborhoods of New York, providing a good way to find a safer place to live and work. For police departments, we can assist them to reduce crime through a better-informed citizenry. Creating more self-reliance among community members is a great benefit to community oriented policing efforts everywhere and has been proven effective in combating crime.#
Then, please follow me to use this app!"))#
                                    )),#
                            #animation#
                            tabItem(tabName = "Animation",#
                                    fluidPage(#
                                        fluidRow(leafletOutput("mapAct", height = "800px")),#
                                        fluidRow(absolutePanel(top = 150, right = 20,#
                                            sliderInput("animation", "Time(30 minutes)", min = 0, #
                                                        max = 47, value = 0, step = 1, #
                                                        animate = animationOptions(interval = 500, loop = FALSE)))),#
                                        fluidRow(absolutePanel(plotOutput("line"), top = 80, left = 300,#
                                                               width = 360, height = 300, draggable = TRUE)))),#
                            #mapMarkers#
                            tabItem(tabName = "Map",#
                                    fluidPage(#
                                        fluidRow(column(3,#
                                                        selectizeInput("boro1", "Choose the Borough",#
                                                                       choices = c("Choose Boro(s)" = "",#
                                                                                   "BRONX", "BROOKLYN",#
                                                                                   "MANHATTAN", "QUEENS",#
                                                                                   "STATEN ISLAND"),#
                                                                           #Shooting_data$BORO#
                                                                       multiple = TRUE)),#
                                                 column(3,#
                                                        dateInput("start_date", "Choose start date",#
                                                                  value = "2006-01-01",#
                                                                  min = min(Shooting_data$OCCUR_DATE),#
                                                                  max = max(Shooting_data$OCCUR_DATE)),#
                                                        dateInput("end_date", "Choose end date",#
                                                                  value = "2018-12-31",#
                                                                  min = min(Shooting_data$OCCUR_DATE),#
                                                                  max = max(Shooting_data$OCCUR_DATE))),#
                                                 column(3,#
                                                        selectInput("sex", 'Victim Gender',#
                                                                    choices = Shooting_data$VIC_SEX,#
                                                                    multiple = TRUE),#
                                                        selectInput("race", 'Ethnicity',#
                                                                    choices = Shooting_data$VIC_RACE,#
                                                                    multiple = TRUE)),#
                                                 column(3,#
                                                        selectInput("age", 'Age group',#
                                                                    choices = Shooting_data$VIC_AGE_GROUP,#
                                                                    multiple = TRUE))),#
                                        fluidRow(leafletOutput("mapMarker", height = "600px")))),#
#
                            #overview#
                            tabItem(tabName = "Overview", #
                                    fluidPage(#
                                        fluidRow(#
                                            column(6,#
                                                   selectInput("choice1", 'Choose a graph',#
                                                               choices = c("Choose a graph" = "",#
                                                                           "Year", "Season", "Week", #
                                                                           "Borough", "Murder"))),#
                                            column(6)),#
                                        fluidRow(plotOutput("plot1", height = "600px")),#
                                        fluidRow(column(6,#
                                                        selectizeInput("boro2", "Choose the Borough",#
                                                                       choices = c("Choose Boro(s)" = "",#
                                                                                   "BRONX", "BROOKLYN",#
                                                                                   "MANHATTAN", "QUEENS",#
                                                                                   "STATEN ISLAND"),#
                                                                       #Shooting_data$BORO#
                                                                       multiple = TRUE)),#
                                                 column(6,#
                                                        dateInput("startdate", "Choose start date",#
                                                                  value = "2006-01-01",#
                                                                  min = min(Shooting_data$OCCUR_DATE),#
                                                                  max = max(Shooting_data$OCCUR_DATE)),#
                                                        dateInput("enddate", "Choose end date",#
                                                                  value = "2018-12-31",#
                                                                  min = min(Shooting_data$OCCUR_DATE),#
                                                                  max = max(Shooting_data$OCCUR_DATE)))),#
                                        fluidRow(plotOutput("plot2", height = "400px")))),#
                            tabItem(tabName = "Holidays",#
                                    fluidPage(#
                                        fluidRow(#
                                            column(6,#
                                                   selectInput("choice2", 'Choose a holiday',#
                                                               choices = c("Independence Day",#
                                                                           "Halloween", "Christmas"))),#
                                            column(6,#
                                                   sliderInput("year1", 'Choose time', min = 2006, max = 2018,#
                                                               step = 1, value = 2012))),#
                                        fluidRow(plotOutput("plot3", height = "600px"))#
                                        )),#
                            #source#
                            tabItem(tabName = "Source",#
                                    fluidPage(#
                                        fluidRow(box(width = 15, title = "Data Source", status = "warning",#
                                                     solidHeader = TRUE, "The source data for this project is from", #
                                                     tags$a(href = "https://data.cityofnewyork.us/Public-Safety/NYPD-Shooting-Incident-Data-Historic-/833y-fsy8", #
                                                            "NYC open data"))),#
                                        fluidRow(box(width = 15, title = "Project Code", status = "warning",#
                                                     solidHeader = TRUE, "The codes for this project are shared at",#
                                                     tags$a(href = "https://github.com/TZstatsADS/fall2019-proj2--sec2-grp10",#
                                                            "Github")))#
                                    ))#
                    )))#
# server#
server <- function(input, output) {#
    # animation#
    filteredData <- reactive({#
        as.vector(Animation_matrix[input$animation+1,])#
    })#
    filteredData1 <- reactive({#
        df.line_chart[1:(input$animation+1),]#
    })#
    output$mapAct<-renderLeaflet({#
        leaflet(options = leafletOptions(minZoom = 0, maxZoom = 18)) %>%#
            addTiles('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png') %>%#
            setView(lng = -73.99, lat = 40.72, zoom = 11) %>%#
            addLegend(pal = pal,values = bins, position = "topright")#
    })#
    observe({#
        leafletProxy("mapAct") %>%#
            addPolygons(data = neighborhood_map, stroke = TRUE, weight = 1, color = "pink", #
                        fillOpacity = .4, fillColor = pal(filteredData()))#
        output$line <- renderPlot({#
            p = ggplot(filteredData1(), aes(x = Time,y = Amount, group = 1))#
            p + geom_line() + #
                scale_x_continuous(limits = c(0,24), expand = c(0,0)) + #
                scale_y_continuous(limits = c(0,1000), expand = c(0,0)) + #
                xlab("Time(hour)") + theme_bw() +#
                theme_wsj()+ scale_colour_wsj("colors6")#
            })#
         })#
     # mapMarker#
    # output$mapMarker <- renderLeaflet({#
    #     leaflet(st, options = leafletOptions(minZoom = 0, maxZoom = 18)) %>%#
    #         addTiles('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png') %>%#
    #         setView(lng = -73.95, lat = 40.72, zoom = 11) %>%#
    #         addCircleMarkers(lng = ~sd$Longitude, lat = ~sd$Latitude,#
    #                          popup = content, clusterOptions = markerClusterOptions())#
    # })#
    filteredData2 <- reactive({#
        Shooting_data %>% filter(BORO %in% input$boro1 & OCCUR_DATE >= input$start_date & OCCUR_DATE <= input$end_date)#
        })#
    filteredData3 <- reactive({#
        Shooting_data %>% filter(OCCUR_DATE >= input$start_date & OCCUR_DATE <= input$end_date)#
    })#
#
    output$mapMarker <- renderLeaflet({#
        if (is.null(input$boro1) == TRUE) {#
            leaflet(st, options = leafletOptions(minZoom = 0, maxZoom = 18)) %>%#
                addTiles('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png') %>%#
                setView(lng = -73.95, lat = 40.72, zoom = 11) %>%#
                addCircleMarkers(lng = ~filteredData3()$Longitude, lat = ~filteredData3()$Latitude,#
                                 popup = content, clusterOptions = markerClusterOptions())#
        } else {#
            leaflet(st, options = leafletOptions(minZoom = 0, maxZoom = 18)) %>%#
                addTiles('http://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png') %>%#
                setView(lng = -73.95, lat = 40.72, zoom = 11) %>%#
                addCircleMarkers(lng = ~filteredData2()$Longitude, lat = ~filteredData2()$Latitude,#
                                 popup = content, clusterOptions = markerClusterOptions())#
        }#
#
    })#
#
    #overview#
#
    output$plot1 <- renderPlot({#
        choice <- input$choice1#
        out(choice)#
    })#
    # pie#
    filteredData4 <- reactive({#
        Shooting_data %>% filter(BORO %in% input$boro2 & OCCUR_DATE >= input$startdate & OCCUR_DATE <= input$enddate)#
    })#
    filteredData5 <- reactive({#
        Shooting_data %>% filter(OCCUR_DATE >= input$startdate & OCCUR_DATE <= input$enddate)#
    })#
    output$plot2 <- renderPlot({#
        if (input$startdate > input$enddate) {plot(NULL)}#
        if (is.null(input$boro2) == TRUE) {plotimage(filteredData5())}#
        else {plotimage(filteredData4())}#
    })#
    # holidays#
#
    output$plot3 <- renderPlot({#
        y <- input$year1 - 2005#
        cho <- input$choice2#
        eventimage(co(cho), y)#
    })#
}#
#
shinyApp(ui = ui, server = server)
